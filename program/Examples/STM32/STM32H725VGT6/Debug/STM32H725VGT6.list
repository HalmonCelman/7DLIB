
STM32H725VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000840  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b0c  08000b0c  00010b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000b1c  08000b1c  00010b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000b20  08000b20  00010b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08000b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08000b34  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08000b34  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004915  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000b81  00000000  00000000  00024953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000460  00000000  00000000  000254d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000003e8  00000000  00000000  00025938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000011f0  00000000  00000000  00025d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00004f60  00000000  00000000  00026f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001364ae  00000000  00000000  0002be70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0016231e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001000  00000000  00000000  00162370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08000af4 	.word	0x08000af4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08000af4 	.word	0x08000af4

0800030c <main>:




int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  HAL_Init();
 8000310:	f000 f8e8 	bl	80004e4 <HAL_Init>

  while (1)
 8000314:	e7fe      	b.n	8000314 <main+0x8>
	...

08000318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <HAL_MspInit+0x30>)
 8000320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000324:	4a08      	ldr	r2, [pc, #32]	; (8000348 <HAL_MspInit+0x30>)
 8000326:	f043 0302 	orr.w	r3, r3, #2
 800032a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_MspInit+0x30>)
 8000330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000334:	f003 0302 	and.w	r3, r3, #2
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	58024400 	.word	0x58024400

0800034c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <NMI_Handler+0x4>

08000352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <HardFault_Handler+0x4>

08000358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800035c:	e7fe      	b.n	800035c <MemManage_Handler+0x4>

0800035e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000362:	e7fe      	b.n	8000362 <BusFault_Handler+0x4>

08000364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <UsageFault_Handler+0x4>

0800036a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000398:	f000 f916 	bl	80005c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003a4:	4b32      	ldr	r3, [pc, #200]	; (8000470 <SystemInit+0xd0>)
 80003a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003aa:	4a31      	ldr	r2, [pc, #196]	; (8000470 <SystemInit+0xd0>)
 80003ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b4:	4b2f      	ldr	r3, [pc, #188]	; (8000474 <SystemInit+0xd4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f003 030f 	and.w	r3, r3, #15
 80003bc:	2b06      	cmp	r3, #6
 80003be:	d807      	bhi.n	80003d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003c0:	4b2c      	ldr	r3, [pc, #176]	; (8000474 <SystemInit+0xd4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f023 030f 	bic.w	r3, r3, #15
 80003c8:	4a2a      	ldr	r2, [pc, #168]	; (8000474 <SystemInit+0xd4>)
 80003ca:	f043 0307 	orr.w	r3, r3, #7
 80003ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003d0:	4b29      	ldr	r3, [pc, #164]	; (8000478 <SystemInit+0xd8>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a28      	ldr	r2, [pc, #160]	; (8000478 <SystemInit+0xd8>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003dc:	4b26      	ldr	r3, [pc, #152]	; (8000478 <SystemInit+0xd8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003e2:	4b25      	ldr	r3, [pc, #148]	; (8000478 <SystemInit+0xd8>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	4924      	ldr	r1, [pc, #144]	; (8000478 <SystemInit+0xd8>)
 80003e8:	4b24      	ldr	r3, [pc, #144]	; (800047c <SystemInit+0xdc>)
 80003ea:	4013      	ands	r3, r2
 80003ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ee:	4b21      	ldr	r3, [pc, #132]	; (8000474 <SystemInit+0xd4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f003 0308 	and.w	r3, r3, #8
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d007      	beq.n	800040a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003fa:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <SystemInit+0xd4>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f023 030f 	bic.w	r3, r3, #15
 8000402:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <SystemInit+0xd4>)
 8000404:	f043 0307 	orr.w	r3, r3, #7
 8000408:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800040a:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <SystemInit+0xd8>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <SystemInit+0xd8>)
 8000412:	2200      	movs	r2, #0
 8000414:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <SystemInit+0xd8>)
 8000418:	2200      	movs	r2, #0
 800041a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <SystemInit+0xd8>)
 800041e:	4a18      	ldr	r2, [pc, #96]	; (8000480 <SystemInit+0xe0>)
 8000420:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <SystemInit+0xd8>)
 8000424:	4a17      	ldr	r2, [pc, #92]	; (8000484 <SystemInit+0xe4>)
 8000426:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000428:	4b13      	ldr	r3, [pc, #76]	; (8000478 <SystemInit+0xd8>)
 800042a:	4a17      	ldr	r2, [pc, #92]	; (8000488 <SystemInit+0xe8>)
 800042c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <SystemInit+0xd8>)
 8000430:	2200      	movs	r2, #0
 8000432:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <SystemInit+0xd8>)
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <SystemInit+0xe8>)
 8000438:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <SystemInit+0xd8>)
 800043c:	2200      	movs	r2, #0
 800043e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000440:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <SystemInit+0xd8>)
 8000442:	4a11      	ldr	r2, [pc, #68]	; (8000488 <SystemInit+0xe8>)
 8000444:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <SystemInit+0xd8>)
 8000448:	2200      	movs	r2, #0
 800044a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <SystemInit+0xd8>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a09      	ldr	r2, [pc, #36]	; (8000478 <SystemInit+0xd8>)
 8000452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000456:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <SystemInit+0xd8>)
 800045a:	2200      	movs	r2, #0
 800045c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <SystemInit+0xec>)
 8000460:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000464:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	e000ed00 	.word	0xe000ed00
 8000474:	52002000 	.word	0x52002000
 8000478:	58024400 	.word	0x58024400
 800047c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000480:	02020200 	.word	0x02020200
 8000484:	01ff0000 	.word	0x01ff0000
 8000488:	01010280 	.word	0x01010280
 800048c:	52004000 	.word	0x52004000

08000490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000494:	f7ff ff84 	bl	80003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800049a:	490d      	ldr	r1, [pc, #52]	; (80004d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800049c:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004b0:	4c0a      	ldr	r4, [pc, #40]	; (80004dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004be:	f000 faf5 	bl	8000aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004c2:	f7ff ff23 	bl	800030c <main>
  bx  lr
 80004c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80004cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80004d0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80004d4:	08000b24 	.word	0x08000b24
  ldr r2, =_sbss
 80004d8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80004dc:	24000030 	.word	0x24000030

080004e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC3_IRQHandler>
	...

080004e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ea:	2003      	movs	r0, #3
 80004ec:	f000 f932 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80004f0:	f000 f962 	bl	80007b8 <HAL_RCC_GetSysClockFreq>
 80004f4:	4602      	mov	r2, r0
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_Init+0x68>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	0a1b      	lsrs	r3, r3, #8
 80004fc:	f003 030f 	and.w	r3, r3, #15
 8000500:	4913      	ldr	r1, [pc, #76]	; (8000550 <HAL_Init+0x6c>)
 8000502:	5ccb      	ldrb	r3, [r1, r3]
 8000504:	f003 031f 	and.w	r3, r3, #31
 8000508:	fa22 f303 	lsr.w	r3, r2, r3
 800050c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_Init+0x68>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 030f 	and.w	r3, r3, #15
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_Init+0x6c>)
 8000518:	5cd3      	ldrb	r3, [r2, r3]
 800051a:	f003 031f 	and.w	r3, r3, #31
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	fa22 f303 	lsr.w	r3, r2, r3
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x70>)
 8000526:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000528:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <HAL_Init+0x74>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800052e:	200f      	movs	r0, #15
 8000530:	f000 f814 	bl	800055c <HAL_InitTick>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
 800053c:	e002      	b.n	8000544 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800053e:	f7ff feeb 	bl	8000318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000542:	2300      	movs	r3, #0
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	58024400 	.word	0x58024400
 8000550:	08000b0c 	.word	0x08000b0c
 8000554:	24000004 	.word	0x24000004
 8000558:	24000000 	.word	0x24000000

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_InitTick+0x60>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d101      	bne.n	8000570 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	e021      	b.n	80005b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <HAL_InitTick+0x64>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <HAL_InitTick+0x60>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f909 	bl	800079e <HAL_SYSTICK_Config>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e00e      	b.n	80005b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d80a      	bhi.n	80005b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a4:	f000 f8e1 	bl	800076a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <HAL_InitTick+0x68>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2400000c 	.word	0x2400000c
 80005c0:	24000000 	.word	0x24000000
 80005c4:	24000008 	.word	0x24000008

080005c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x20>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x24>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <HAL_IncTick+0x24>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2400000c 	.word	0x2400000c
 80005ec:	2400002c 	.word	0x2400002c

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <__NVIC_SetPriorityGrouping+0x40>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	4313      	orrs	r3, r2
 800061c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061e:	4a04      	ldr	r2, [pc, #16]	; (8000630 <__NVIC_SetPriorityGrouping+0x40>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	60d3      	str	r3, [r2, #12]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00
 8000634:	05fa0000 	.word	0x05fa0000

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	; (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000734:	f7ff ff8e 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff47 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000778:	f7ff ff5e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 800077c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	68b9      	ldr	r1, [r7, #8]
 8000782:	6978      	ldr	r0, [r7, #20]
 8000784:	f7ff ff90 	bl	80006a8 <NVIC_EncodePriority>
 8000788:	4602      	mov	r2, r0
 800078a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff5f 	bl	8000654 <__NVIC_SetPriority>
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ffb2 	bl	8000710 <SysTick_Config>
 80007ac:	4603      	mov	r3, r0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80007be:	4bb3      	ldr	r3, [pc, #716]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80007c6:	2b18      	cmp	r3, #24
 80007c8:	f200 8155 	bhi.w	8000a76 <HAL_RCC_GetSysClockFreq+0x2be>
 80007cc:	a201      	add	r2, pc, #4	; (adr r2, 80007d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80007ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d2:	bf00      	nop
 80007d4:	08000839 	.word	0x08000839
 80007d8:	08000a77 	.word	0x08000a77
 80007dc:	08000a77 	.word	0x08000a77
 80007e0:	08000a77 	.word	0x08000a77
 80007e4:	08000a77 	.word	0x08000a77
 80007e8:	08000a77 	.word	0x08000a77
 80007ec:	08000a77 	.word	0x08000a77
 80007f0:	08000a77 	.word	0x08000a77
 80007f4:	0800085f 	.word	0x0800085f
 80007f8:	08000a77 	.word	0x08000a77
 80007fc:	08000a77 	.word	0x08000a77
 8000800:	08000a77 	.word	0x08000a77
 8000804:	08000a77 	.word	0x08000a77
 8000808:	08000a77 	.word	0x08000a77
 800080c:	08000a77 	.word	0x08000a77
 8000810:	08000a77 	.word	0x08000a77
 8000814:	08000865 	.word	0x08000865
 8000818:	08000a77 	.word	0x08000a77
 800081c:	08000a77 	.word	0x08000a77
 8000820:	08000a77 	.word	0x08000a77
 8000824:	08000a77 	.word	0x08000a77
 8000828:	08000a77 	.word	0x08000a77
 800082c:	08000a77 	.word	0x08000a77
 8000830:	08000a77 	.word	0x08000a77
 8000834:	0800086b 	.word	0x0800086b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000838:	4b94      	ldr	r3, [pc, #592]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f003 0320 	and.w	r3, r3, #32
 8000840:	2b00      	cmp	r3, #0
 8000842:	d009      	beq.n	8000858 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000844:	4b91      	ldr	r3, [pc, #580]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	f003 0303 	and.w	r3, r3, #3
 800084e:	4a90      	ldr	r2, [pc, #576]	; (8000a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8000850:	fa22 f303 	lsr.w	r3, r2, r3
 8000854:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8000856:	e111      	b.n	8000a7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8000858:	4b8d      	ldr	r3, [pc, #564]	; (8000a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800085a:	61bb      	str	r3, [r7, #24]
    break;
 800085c:	e10e      	b.n	8000a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800085e:	4b8d      	ldr	r3, [pc, #564]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8000860:	61bb      	str	r3, [r7, #24]
    break;
 8000862:	e10b      	b.n	8000a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8000864:	4b8c      	ldr	r3, [pc, #560]	; (8000a98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8000866:	61bb      	str	r3, [r7, #24]
    break;
 8000868:	e108      	b.n	8000a7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800086a:	4b88      	ldr	r3, [pc, #544]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800086c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800086e:	f003 0303 	and.w	r3, r3, #3
 8000872:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000874:	4b85      	ldr	r3, [pc, #532]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000878:	091b      	lsrs	r3, r3, #4
 800087a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800087e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000880:	4b82      	ldr	r3, [pc, #520]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800088a:	4b80      	ldr	r3, [pc, #512]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800088c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	fb02 f303 	mul.w	r3, r2, r3
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	f000 80e1 	beq.w	8000a70 <HAL_RCC_GetSysClockFreq+0x2b8>
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	f000 8083 	beq.w	80009bc <HAL_RCC_GetSysClockFreq+0x204>
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	f200 80a1 	bhi.w	8000a00 <HAL_RCC_GetSysClockFreq+0x248>
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d003      	beq.n	80008cc <HAL_RCC_GetSysClockFreq+0x114>
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d056      	beq.n	8000978 <HAL_RCC_GetSysClockFreq+0x1c0>
 80008ca:	e099      	b.n	8000a00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80008cc:	4b6f      	ldr	r3, [pc, #444]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 0320 	and.w	r3, r3, #32
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d02d      	beq.n	8000934 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80008d8:	4b6c      	ldr	r3, [pc, #432]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	4a6b      	ldr	r2, [pc, #428]	; (8000a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80008e4:	fa22 f303 	lsr.w	r3, r2, r3
 80008e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	ee07 3a90 	vmov	s15, r3
 80008f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	ee07 3a90 	vmov	s15, r3
 80008fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000902:	4b62      	ldr	r3, [pc, #392]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800090a:	ee07 3a90 	vmov	s15, r3
 800090e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000912:	ed97 6a02 	vldr	s12, [r7, #8]
 8000916:	eddf 5a61 	vldr	s11, [pc, #388]	; 8000a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800091a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800091e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800092a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800092e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8000932:	e087      	b.n	8000a44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800093e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8000aa0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8000942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000946:	4b51      	ldr	r3, [pc, #324]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800094e:	ee07 3a90 	vmov	s15, r3
 8000952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000956:	ed97 6a02 	vldr	s12, [r7, #8]
 800095a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8000a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800095e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800096a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800096e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8000976:	e065      	b.n	8000a44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	ee07 3a90 	vmov	s15, r3
 800097e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000982:	eddf 6a48 	vldr	s13, [pc, #288]	; 8000aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8000986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800098a:	4b40      	ldr	r3, [pc, #256]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000992:	ee07 3a90 	vmov	s15, r3
 8000996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800099a:	ed97 6a02 	vldr	s12, [r7, #8]
 800099e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8000a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80009a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80009a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80009aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80009ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80009b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80009ba:	e043      	b.n	8000a44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	ee07 3a90 	vmov	s15, r3
 80009c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8000aa8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80009ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009de:	ed97 6a02 	vldr	s12, [r7, #8]
 80009e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8000a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80009e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80009ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80009ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80009f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80009f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80009fe:	e021      	b.n	8000a44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	ee07 3a90 	vmov	s15, r3
 8000a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8000aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8000a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a1a:	ee07 3a90 	vmov	s15, r3
 8000a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8000a26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8000a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8000a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8000a42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	0a5b      	lsrs	r3, r3, #9
 8000a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a4e:	3301      	adds	r3, #1
 8000a50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	ee07 3a90 	vmov	s15, r3
 8000a58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8000a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a68:	ee17 3a90 	vmov	r3, s15
 8000a6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8000a6e:	e005      	b.n	8000a7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
    break;
 8000a74:	e002      	b.n	8000a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8000a78:	61bb      	str	r3, [r7, #24]
    break;
 8000a7a:	bf00      	nop
  }

  return sysclockfreq;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3724      	adds	r7, #36	; 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	58024400 	.word	0x58024400
 8000a90:	03d09000 	.word	0x03d09000
 8000a94:	003d0900 	.word	0x003d0900
 8000a98:	017d7840 	.word	0x017d7840
 8000a9c:	46000000 	.word	0x46000000
 8000aa0:	4c742400 	.word	0x4c742400
 8000aa4:	4a742400 	.word	0x4a742400
 8000aa8:	4bbebc20 	.word	0x4bbebc20

08000aac <__libc_init_array>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4d0d      	ldr	r5, [pc, #52]	; (8000ae4 <__libc_init_array+0x38>)
 8000ab0:	4c0d      	ldr	r4, [pc, #52]	; (8000ae8 <__libc_init_array+0x3c>)
 8000ab2:	1b64      	subs	r4, r4, r5
 8000ab4:	10a4      	asrs	r4, r4, #2
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	42a6      	cmp	r6, r4
 8000aba:	d109      	bne.n	8000ad0 <__libc_init_array+0x24>
 8000abc:	4d0b      	ldr	r5, [pc, #44]	; (8000aec <__libc_init_array+0x40>)
 8000abe:	4c0c      	ldr	r4, [pc, #48]	; (8000af0 <__libc_init_array+0x44>)
 8000ac0:	f000 f818 	bl	8000af4 <_init>
 8000ac4:	1b64      	subs	r4, r4, r5
 8000ac6:	10a4      	asrs	r4, r4, #2
 8000ac8:	2600      	movs	r6, #0
 8000aca:	42a6      	cmp	r6, r4
 8000acc:	d105      	bne.n	8000ada <__libc_init_array+0x2e>
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
 8000ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad4:	4798      	blx	r3
 8000ad6:	3601      	adds	r6, #1
 8000ad8:	e7ee      	b.n	8000ab8 <__libc_init_array+0xc>
 8000ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ade:	4798      	blx	r3
 8000ae0:	3601      	adds	r6, #1
 8000ae2:	e7f2      	b.n	8000aca <__libc_init_array+0x1e>
 8000ae4:	08000b1c 	.word	0x08000b1c
 8000ae8:	08000b1c 	.word	0x08000b1c
 8000aec:	08000b1c 	.word	0x08000b1c
 8000af0:	08000b20 	.word	0x08000b20

08000af4 <_init>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr

08000b00 <_fini>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr
